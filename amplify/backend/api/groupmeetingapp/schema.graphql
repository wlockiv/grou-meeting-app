type Group
@model
@auth(
    rules: [
        { allow: owner, operations: [create, delete, update] }
        { allow: groups, groups: ["admin"], operations: [create, delete, update] }
        { allow: private, operations: [read] }
    ]
) {
    id: ID!
    name: String!
    events: [Event] @connection(keyName: "byGroup", fields: ["id"])
    members: [GroupMember] @connection(keyName: "byGroup", fields: ["id"])
    owner: String
}

type GroupMember
@model(queries: null)
@key(name: "byGroup", fields: ["groupId", "userId"])
@key(name: "byUser", fields: ["userId", "groupId"]) {
    id: ID!
    groupId: ID!
    userId: ID!
    group: Group! @connection(fields: ["groupId"])
    user: User! @connection(fields: ["userId"])
}

# TODO: Make it so a user can belong to more than one group (many-to-many)
type User @model {
    id: ID!
    firstName: String
    lastName: String
    email: String!
    mobileNumber: String
    groups: [GroupMember] @connection(keyName: "byUser", fields: ["id"])
}

type Event @model @key(name: "byGroup", fields: ["groupId"]) {
    id: ID!
    title: String!
    date: AWSDateTime
    description: String!
    groupId: ID!
    group: Group @connection(fields: ["groupId"])
}

# ! A custom resolver was assigned to auto-gen the ID field
input CreateGroupInput {
    name: String!
}

# ! A custom resolver was assigned to auto-gen the ID field
input CreateEventInput {
    groupId: ID!
    title: String!
    description: String!
    date: AWSDateTime
}

# ! A custom resolver was assigned to auto-gen the ID field
input CreateUserInput {
    id: ID!
    firstName: String
    lastName: String
    email: String!
    mobileNumber: String
    groupId: ID
}

# ! A custom resolver was assigned to auto-gen the ID field
input CreateGroupMemberInput {
    groupId: ID!
    userId: ID!
}

type Subscription {
    onCreateEventByGroup(groupId: String!): Event @aws_subscribe(mutations: ["createEvent"])
}
